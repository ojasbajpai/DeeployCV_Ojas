#LOW PASS FILTER CODE
import cv2
import numpy as np

# Load the image in grayscale
image = cv2.imread(r'C:\Users\manish vajpai\Desktop\Ko.jpg', cv2.IMREAD_GRAYSCALE)

# Check if the image is loaded properly
if image is None:
    print("Error: Unable to load the image. Make sure the image path is correct.")
    exit()

# Function to apply Low-Pass Filter
def low_pass_filter(img, radius):
    # Perform FFT to get frequency domain
    dft = cv2.dft(np.float32(img), flags=cv2.DFT_COMPLEX_OUTPUT)
    dft_shift = np.fft.fftshift(dft)

    # Create a mask with a circular low-pass filter
    rows, cols = img.shape
    crow, ccol = rows // 2, cols // 2  # Center
    mask = np.zeros((rows, cols, 2), np.uint8)
    cv2.circle(mask, (ccol, crow), radius, (1, 1), -1)

    # Apply mask and inverse DFT
    fshift = dft_shift * mask
    f_ishift = np.fft.ifftshift(fshift)
    img_back = cv2.idft(f_ishift)
    img_back = cv2.magnitude(img_back[:, :, 0], img_back[:, :, 1])
    return img_back

# Apply Low-Pass Filter
low_radius = 30  # Radius for Low-Pass Filter
low_pass_result = low_pass_filter(image, low_radius)

# Normalize the result for better display
filtered_image = cv2.normalize(low_pass_result, None, 0, 255, cv2.NORM_MINMAX)
filtered_image = np.uint8(filtered_image)

# Display the filtered image
cv2.imshow("Low-Pass Filtered Image", filtered_image)
cv2.waitKey(0)
cv2.destroyAllWindows()

#HIGH PASS FILTER CODE
import cv2
import numpy as np

# Load the image in grayscale
image = cv2.imread(r'C:\Users\manish vajpai\Desktop\Ro.jpg', cv2.IMREAD_GRAYSCALE)

# Check if the image is loaded properly
if image is None:
    print("Error: Unable to load the image. Make sure the image path is correct.")
    exit()

# Function to apply High-Pass Filter
def high_pass_filter(img, radius):
    # Perform FFT to get frequency domain
    dft = cv2.dft(np.float32(img), flags=cv2.DFT_COMPLEX_OUTPUT)
    dft_shift = np.fft.fftshift(dft)

    # Create a mask with a circular high-pass filter
    rows, cols = img.shape
    crow, ccol = rows // 2, cols // 2  # Center
    mask = np.ones((rows, cols, 2), np.uint8)
    cv2.circle(mask, (ccol, crow), radius, (0, 0), -1)

    # Apply mask and inverse DFT
    fshift = dft_shift * mask
    f_ishift = np.fft.ifftshift(fshift)
    img_back = cv2.idft(f_ishift)
    img_back = cv2.magnitude(img_back[:, :, 0], img_back[:, :, 1])
    return img_back

# Apply High-Pass Filter
high_radius = 30  # Radius for High-Pass Filter
high_pass_result = high_pass_filter(image, high_radius)

# Normalize the result for better display
filtered_image = cv2.normalize(high_pass_result, None, 0, 255, cv2.NORM_MINMAX)
filtered_image = np.uint8(filtered_image)

# Display the filtered image
cv2.imshow("High-Pass Filtered Image", filtered_image)
cv2.waitKey(0)
cv2.destroyAllWindows()

#COMBINING IMAGES
import cv2
import matplotlib.pyplot as plt

# Load the two filtered images
low_pass_image = cv2.imread(r'C:\Users\manish vajpai\Desktop\Kol.jpg', cv2.IMREAD_GRAYSCALE)
high_pass_image = cv2.imread(r'C:\Users\manish vajpai\Desktop\Rohit.jpg', cv2.IMREAD_GRAYSCALE)

# Check if both images are loaded properly
if low_pass_image is None or high_pass_image is None:
    print("Error: Unable to load one or both images. Check the file paths.")
    exit()

# Ensure both images are of the same size
if low_pass_image.shape != high_pass_image.shape:
    print("Error: Images are not the same size. Resize them before combining.")
    exit()

# Combine the images using weighted addition
alpha = 0.5  # Weight for the low-pass filtered image
beta = 0.5   # Weight for the high-pass filtered image
gamma = 0    # Scalar added to the sum

combined_image = cv2.addWeighted(low_pass_image, alpha, high_pass_image, beta, gamma)

# Display the results
plt.figure(figsize=(12, 8))

plt.subplot(1, 3, 1)
plt.title("Low-Pass Filtered Image")
plt.imshow(low_pass_image, cmap='gray')

plt.subplot(1, 3, 2)
plt.title("High-Pass Filtered Image")
plt.imshow(high_pass_image, cmap='gray')

plt.subplot(1, 3, 3)
plt.title("Combined Image")
plt.imshow(combined_image, cmap='gray')

plt.tight_layout()
plt.show()

# Optionally save the combined image
cv2.imwrite('combined_image.jpg', combined_image)
